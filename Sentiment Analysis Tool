{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4140,"sourceType":"datasetVersion","datasetId":2477}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Sentiment Analysis Tool**\n\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport re\nimport matplotlib.pyplot as plt  # Importing Matplotlib\n\n# Load the dataset from the CSV file\ndata = pd.read_csv(\"/kaggle/input/sentiment140/training.1600000.processed.noemoticon.csv\", header=None, encoding='latin1')\n\n# Assign column names\ndata.columns = [\"target\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\n\n# Extract necessary columns (target and text)\ndata = data[[\"target\", \"text\"]]\n\n# Preprocess the text data\ndef preprocess_text(text):\n    # Remove URLs\n    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", \"\", text)\n    # Remove special characters and numbers\n    text = re.sub(r\"[^a-zA-Z\\s]\", \"\", text)\n    # Convert text to lowercase\n    text = text.lower()\n    return text\n\ndata[\"text\"] = data[\"text\"].apply(preprocess_text)\n\n# Display the preprocessed data\nprint(data.head() , end = \"\\n\")\n\n# Visualize class distribution\nplt.figure(figsize=(8, 6))\ndata['target'].value_counts().plot(kind='bar', color=['skyblue', 'salmon'])\nplt.title('Class Distribution')\nplt.xlabel('Sentiment')\nplt.ylabel('Count')\nplt.xticks(ticks=[0, 1], labels=['Negative', 'Positive'], rotation=0)\nplt.show()\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-30T09:57:32.276976Z","iopub.execute_input":"2024-04-30T09:57:32.277386Z","iopub.status.idle":"2024-04-30T09:57:53.125737Z","shell.execute_reply.started":"2024-04-30T09:57:32.277355Z","shell.execute_reply":"2024-04-30T09:57:53.124316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = data[\"text\"]\ny = data[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nvectorizer = CountVectorizer()\nX_train_bow = vectorizer.fit_transform(X_train)\nX_test_bow = vectorizer.transform(X_test)\n\nmodel = LogisticRegression(max_iter=10000)\nmodel.fit(X_train_bow, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test_bow)\naccuracy = accuracy_score(y_test, y_pred)\nclassification_rep = classification_report(y_test, y_pred)\n\nprint(\"Accuracy:\", accuracy)\nprint(\"Classification Report:\")\nprint(classification_rep)\n\n# Plotting the confusion matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\nconf_matrix = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T10:06:37.461171Z","iopub.execute_input":"2024-04-30T10:06:37.461674Z","iopub.status.idle":"2024-04-30T10:17:32.062590Z","shell.execute_reply.started":"2024-04-30T10:06:37.461637Z","shell.execute_reply":"2024-04-30T10:17:32.060736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define a function to preprocess text\ndef preprocess_text(text):\n    # Remove URLs\n    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", \"\", text)\n    # Remove special characters and numbers\n    text = re.sub(r\"[^a-zA-Z\\s]\", \"\", text)\n    # Convert text to lowercase\n    text = text.lower()\n    return text\n\n# Example text\nexample_texts = [\n    \"I absolutely loved the new movie! It was amazing.\",\n    \"This product is worst. I would'nt recommend it to anyone.\"\n]\n\n# Preprocess example texts\npreprocessed_texts = [preprocess_text(text) for text in example_texts]\n\n# Make predictions using the logistic regression model\npredictions = model.predict(vectorizer.transform(preprocessed_texts))\n\n# Print the predictions\nfor text, prediction in zip(example_texts, predictions):\n    sentiment = \"Positive\" if prediction == 4 else \"Negative\"\n    print(\"Text:\", text)\n    print(\"Predicted Sentiment:\", sentiment)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T10:21:35.757888Z","iopub.execute_input":"2024-04-30T10:21:35.758334Z","iopub.status.idle":"2024-04-30T10:21:35.770190Z","shell.execute_reply.started":"2024-04-30T10:21:35.758302Z","shell.execute_reply":"2024-04-30T10:21:35.768280Z"},"trusted":true},"execution_count":null,"outputs":[]}]}